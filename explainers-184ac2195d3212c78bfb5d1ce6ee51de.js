let wasm_bindgen;(function(){const __exports={};let wasm;let cachedTextDecoder=new TextDecoder("utf-8",{ignoreBOM:true,fatal:true});cachedTextDecoder.decode();let cachegetUint8Memory0=null;function getUint8Memory0(){if(cachegetUint8Memory0===null||cachegetUint8Memory0.buffer!==wasm.memory.buffer){cachegetUint8Memory0=new Uint8Array(wasm.memory.buffer)}return cachegetUint8Memory0}function getStringFromWasm0(ptr,len){return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr,ptr+len))}const heap=new Array(32).fill(undefined);heap.push(undefined,null,true,false);let heap_next=heap.length;function addHeapObject(obj){if(heap_next===heap.length)heap.push(heap.length+1);const idx=heap_next;heap_next=heap[idx];heap[idx]=obj;return idx}let WASM_VECTOR_LEN=0;let cachedTextEncoder=new TextEncoder("utf-8");const encodeString=typeof cachedTextEncoder.encodeInto==="function"?function(arg,view){return cachedTextEncoder.encodeInto(arg,view)}:function(arg,view){const buf=cachedTextEncoder.encode(arg);view.set(buf);return{read:arg.length,written:buf.length}};function passStringToWasm0(arg,malloc,realloc){if(realloc===undefined){const buf=cachedTextEncoder.encode(arg);const ptr=malloc(buf.length);getUint8Memory0().subarray(ptr,ptr+buf.length).set(buf);WASM_VECTOR_LEN=buf.length;return ptr}let len=arg.length;let ptr=malloc(len);const mem=getUint8Memory0();let offset=0;for(;offset<len;offset++){const code=arg.charCodeAt(offset);if(code>127)break;mem[ptr+offset]=code}if(offset!==len){if(offset!==0){arg=arg.slice(offset)}ptr=realloc(ptr,len,len=offset+arg.length*3);const view=getUint8Memory0().subarray(ptr+offset,ptr+len);const ret=encodeString(arg,view);offset+=ret.written}WASM_VECTOR_LEN=offset;return ptr}function getObject(idx){return heap[idx]}function dropObject(idx){if(idx<36)return;heap[idx]=heap_next;heap_next=idx}function takeObject(idx){const ret=getObject(idx);dropObject(idx);return ret}class Explanation{static __wrap(ptr){const obj=Object.create(Explanation.prototype);obj.ptr=ptr;return obj}free(){const ptr=this.ptr;this.ptr=0;wasm.__wbg_explanation_free(ptr)}get start_line(){var ret=wasm.__wbg_get_explanation_start_line(this.ptr);return ret>>>0}set start_line(arg0){wasm.__wbg_set_explanation_start_line(this.ptr,arg0)}get start_column(){var ret=wasm.__wbg_get_explanation_start_column(this.ptr);return ret>>>0}set start_column(arg0){wasm.__wbg_set_explanation_start_column(this.ptr,arg0)}get end_line(){var ret=wasm.__wbg_get_explanation_end_line(this.ptr);return ret>>>0}set end_line(arg0){wasm.__wbg_set_explanation_end_line(this.ptr,arg0)}get end_column(){var ret=wasm.__wbg_get_explanation_end_column(this.ptr);return ret>>>0}set end_column(arg0){wasm.__wbg_set_explanation_end_column(this.ptr,arg0)}elaborate(){var ret=wasm.explanation_elaborate(this.ptr);return takeObject(ret)}title(){var ret=wasm.explanation_title(this.ptr);return takeObject(ret)}}__exports.Explanation=Explanation;class Session{static __wrap(ptr){const obj=Object.create(Session.prototype);obj.ptr=ptr;return obj}free(){const ptr=this.ptr;this.ptr=0;wasm.__wbg_session_free(ptr)}static new(source){var ptr0=passStringToWasm0(source,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc);var len0=WASM_VECTOR_LEN;var ret=wasm.session_new(ptr0,len0);return ret===0?undefined:Session.__wrap(ret)}explain(line,ch){var ret=wasm.session_explain(this.ptr,line,ch);return ret===0?undefined:Explanation.__wrap(ret)}}__exports.Session=Session;async function load(module,imports){if(typeof Response==="function"&&module instanceof Response){if(typeof WebAssembly.instantiateStreaming==="function"){try{return await WebAssembly.instantiateStreaming(module,imports)}catch(e){if(module.headers.get("Content-Type")!="application/wasm"){console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e)}else{throw e}}}const bytes=await module.arrayBuffer();return await WebAssembly.instantiate(bytes,imports)}else{const instance=await WebAssembly.instantiate(module,imports);if(instance instanceof WebAssembly.Instance){return{instance:instance,module:module}}else{return instance}}}async function init(input){if(typeof input==="undefined"){let src;if(typeof document==="undefined"){src=location.href}else{src=document.currentScript.src}input=src.replace(/\.js$/,"_bg.wasm")}const imports={};imports.wbg={};imports.wbg.__wbindgen_string_new=function(arg0,arg1){var ret=getStringFromWasm0(arg0,arg1);return addHeapObject(ret)};imports.wbg.__wbindgen_throw=function(arg0,arg1){throw new Error(getStringFromWasm0(arg0,arg1))};if(typeof input==="string"||typeof Request==="function"&&input instanceof Request||typeof URL==="function"&&input instanceof URL){input=fetch(input)}const{instance:instance,module:module}=await load(await input,imports);wasm=instance.exports;init.__wbindgen_wasm_module=module;return wasm}wasm_bindgen=Object.assign(init,__exports)})();
